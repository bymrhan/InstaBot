_VTObjs["_VisilabsTarget_0"].Callback([{"actid":6,"title":"SearchBarSetCookie","actiontype":"Javascript","actiondata":{"jcode":"function vlSearchBarSetCookie() {    try {        function setCookie(cname,cvalue,exdays) {            var d = new Date();            d.setTime(d.getTime() + (exdays*24*60*60*1000));            var expires = \"expires=\" + d.toGMTString();            document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";          }        var el = document.querySelector(\"body > div.page > main > div > div.row.detailPageWrapper > div.col-lg-8.col-md-8.leftColumnForLarge > div.detailContent.borderBox > div.well.additionInfos.mb0.borderBox > ul > li:nth-child(1) > span.col-lg-8.col-md-8.col-sm-8.col-xs-12 > a\") ? document.querySelector(\"body > div.page > main > div > div.row.detailPageWrapper > div.col-lg-8.col-md-8.leftColumnForLarge > div.detailContent.borderBox > div.well.additionInfos.mb0.borderBox > ul > li:nth-child(1) > span.col-lg-8.col-md-8.col-sm-8.col-xs-12 > a\").innerText : \"\";        if (el!=\"\") {            setCookie(\"VLSBLVPT\",encodeURI(el),365);        }    } catch (error) {}}window.onload=vlSearchBarSetCookie();/* C- BA# 2020-01-13  U- BA#2020-02-11 */"},"custom_attr":[]},{"actid":13,"title":"Notification Menu","actiontype":"Javascript","actiondata":{"jcode":"!function(){function t(t){for(var i=t+\"=\",e=decodeURIComponent(document.cookie).split(\";\"),n=0;n<e.length;n++){for(var o=e[n];\" \"==o.charAt(0);)o=o.substring(1);if(0==o.indexOf(i))return o.substring(i.length,o.length)}return\"\"}function e(t,i,e){var n=new Date;n.setTime(n.getTime()+24*e*60*60*1e3);var o=\"expires=\"+n.toGMTString();document.cookie=t+\"=\"+i+\";\"+o+\";path=/\"}try{if(null===document.getElementById(\"vl-notification\")){var n,o,l,a;if(window.innerWidth>768)\"#navbar-collapse-top-menu > li\",n=\"380px\",o=\"48%\",0,l=\"-20px\",a=\"30px\";else{if(!(window.innerWidth>370&&window.innerWidth<768))return!1;\".header-buttons\",n=\"350px\",o=\"52%\",0,l=\"-10px\",a=\"20px\"}var r=[{title:\"Bugün Cv tarihini güncelledin mi?\",description:\" #oişsende!\",url:\"https://www.yenibiris.com/benim-sayfam?OM.zn=acttype-4&OM.zpc=act-13\",icon:\"https://img.visilabs.net/banner/uploaded_images/266_886_20200113104354143.png\"},{title:\"Aramıza yeni ilanlar katıldı!\",description:\"\",url:\"https://www.yenibiris.com/bugunun-is-ilanlari?OM.zn=acttype-4&OM.zpc=act-13\",icon:\"https://img.visilabs.net/banner/uploaded_images/266_886_20200113104411930.png\"},{title:\"İşverenlerin Sana Ulaşabilmeleri İçin Hemen Cv'nde İletişim Bilgilerini Kontrol Et, Güncelle!\",description:\"\",url:\"https://www.yenibiris.com/benim-sayfam?OM.zn=acttype-4&OM.zpc=act-13\",icon:\"https://img.euromsg.net/E27A63A89CDC481FBA3DD1090A399FA9/images/Bildirim_Icon_1.png\"}];try{VLSendImpressionFunc(13,4)}catch(t){}var c=document.createElement(\"style\");c.innerHTML=\"#vl-notification{width: 40px;height: 40px;background: url(https://img.visilabs.net/banner/uploaded_images/266_886_20200113090421185.png) no-repeat center;border-radius: 10px;cursor: pointer;z-index: 9999999999999999;background-size: 60%;display: block;margin-right: \"+l+\"; margin-left: 10px;position: relative;margin-top: 19px;float: left;}            #vl-notification-button{float:left;}            #vl-notification.active {background-color: grey;}            #vl-notification-count {right: 1px; top: 2px;background: #f8b11b;color: #fff;text-align: center;line-height: 7px;border-radius: 50%;font-size: 13px;position: absolute;padding: 5px;display: block;}            #vl-notification-list {width: \"+n+\";padding: 25px \"+a+\";background: #fff;position: absolute;border-radius: 6px;box-shadow: 0 0 8px 2px rgba(0,0,0,0.2);margin-top: 65px;z-index: 99999999999999999;left: -427%;text-align: left;}            #vl-arrow{position: absolute;display: inline-block;left: \"+o+';top: -19px;color: #f8b11b; font-size: 20px; transform: scaleX(1.5);}            .vl-notification-list-item {display: inline-block; margin-top: 20px}            .vl-notification-list-item-title {width: 90%; margin-top: -5px; color: #33495f;font-size: 18px;font-weight: 700;text-decoration: none; padding-left: 70px;}            .vl-notification-list-item-desc {width: 100%;padding: 10px 30px;color: #33495f;font-size: 14px;font-weight: 500;text-decoration: none;}            #vl-notification-list:before #vl-notification-list-overlay {display: none;width: 100%;height: 100%;position: fixed;left: 25%;top: 0;background: #000;opacity: 0.01;z-index: -1;}            #vl-notification-button::before {content: \"\";border-left: 0px !important;height: 30px;position: absolute;bottom: 10px;right: 2px;z-index: -1;}            .vl-notification-rowIcon{width:70px;float:left;margin-left:-17px;margin-right:15px}            .vl-notification-badge{background-color: #f8b11b;padding: 1px 10px;float: right;font-size: 13px;border-radius: 20px;color: white;margin-top: -50px;position: absolute;right: 7px;}            ',document.head.appendChild(c);var d=document.createElement(\"span\");if(d.setAttribute(\"id\",\"vl-notification\"),d.setAttribute(\"class\",\"vl-notification\"),\"true\"!==t(\"vl-notification-seen\")){var s=document.createElement(\"span\");s.setAttribute(\"id\",\"vl-notification-count\"),s.setAttribute(\"class\",\"vl-notification-count\"),s.innerHTML=r.length,d.appendChild(s)}var p=document.createElement(\"div\");p.setAttribute(\"id\",\"vl-notification-list\"),d.appendChild(p);var m=document.createElement(\"span\");m.setAttribute(\"id\",\"vl-arrow\"),m.innerHTML=\"▲\",p.appendChild(m);var f=document.querySelectorAll(\".afterLoginLnks\")[1];for(f.parentNode.insertBefore(d,f.nextSibling),document.getElementById(\"vl-notification-list\").style.visibility=\"hidden\",document.getElementById(\"vl-notification-list\").appendChild(((x=document.createElement(\"div\")).setAttribute(\"style\",\"background-color:#f8b11b;width: 119%;margin-left: -30px;margin-top: -25px;border-radius: 7px 7px 0 0;\"),x.innerHTML=\"<div style='color: white;font-weight: bold;font-size: 25px;padding: 10px;text-align: center;'>Sizin İçin Hazırladık</div>\",x)),i=0;i<r.length;i++){var u=document.createElement(\"a\");u.setAttribute(\"class\",\"vl-notification-list-item\"),u.setAttribute(\"href\",r[i].url);var v=document.createElement(\"img\");v.setAttribute(\"src\",r[i].icon),v.setAttribute(\"class\",\"vl-notification-rowIcon\"),u.appendChild(v);var g=document.createElement(\"div\");if(g.setAttribute(\"class\",\"vl-notification-list-item-title\"),g.innerHTML=r[i].title,u.appendChild(g),\"true\"!==t(\"vl-notificationNew-seen\")){var b=document.createElement(\"div\");b.setAttribute(\"class\",\"vl-notification-badge\"),b.innerText=\"Yeni!\",u.appendChild(b)}var h=document.createElement(\"div\");h.setAttribute(\"class\",\"vl-notification-list-item-desc\"),h.innerHTML=r[i].description,u.appendChild(h),document.getElementById(\"vl-notification-list\").appendChild(u)}document.getElementsByClassName(\"vl-notification-list-item\")[0].style.marginTop=\"13px\",document.addEventListener(\"click\",function(i){var n=((i=i||window.event).target||i.srcElement).className;try{n.indexOf(\"vl-notification\")<0&&\"visible\"===document.getElementById(\"vl-notification-list\").style.visibility?(document.getElementById(\"vl-notification-list\").classList.remove(\"active\"),document.getElementById(\"vl-notification-list\").style.visibility=\"hidden\"):n.indexOf(\"vl-notification\")>-1&&(\"true\"!==t(\"vl-notification-seen\")&&(document.getElementById(\"vl-notification-count\").style.display=\"none\",e(\"vl-notification-seen\",\"true\",365)),\"true\"!==t(\"vl-notificationNew-seen\")?e(\"vl-notificationNew-seen\",\"true\",1):document.querySelectorAll(\".vl-notification-badge\").forEach(t=>{t.remove()}),\"hidden\"===document.getElementById(\"vl-notification-list\").style.visibility?(document.getElementById(\"vl-notification-list\").style.visibility=\"visible\",document.getElementById(\"vl-notification-list\").setAttribute(\"class\",\"active\")):(document.getElementById(\"vl-notification-list\").classList.remove(\"active\"),document.getElementById(\"vl-notification-list\").style.visibility=\"hidden\"))}catch(i){\"block\"===document.getElementById(\"vl-notification-list\").style.display&&(document.getElementById(\"vl-notification-list\").classList.remove(\"active\"),document.getElementById(\"vl-notification-list\").style.visibility=\"hidden\"),console.log(i)}})}}catch(t){console.log(\"Notification Icon cannot be added\")}var x}();","cid":"","courseofaction":""},"custom_attr":[]},{"actid":23,"title":"LastSeenWidget","actiontype":"Javascript","actiondata":{"jcode":"rmcProductViewListener();function rmcProductViewListener() {    try {        rmcWidgetShow(\"vl-last-seen-widget\");        var productObj={},            products=\"\";        if (document.querySelector(\"body > div.page > main > div > div.row.detailPageWrapper > div.col-lg-8.col-md-8.leftColumnForLarge > div.detailHeader.borderBox > div.well.mb0 > div > div.col-lg-10.col-md-10.col-sm-10 > h1\")) {            productObj.title=document.querySelector(\"body > div.page > main > div > div.row.detailPageWrapper > div.col-lg-8.col-md-8.leftColumnForLarge > div.detailHeader.borderBox > div.well.mb0 > div > div.col-lg-10.col-md-10.col-sm-10 > h1\").innerText;        }        if (document.querySelector(\"#companyJobsLnk\")) {            productObj.companyName=document.querySelector(\"#companyJobsLnk\").innerText;        }        if (document.querySelector(\"body > div.page > main > div > div.row.detailPageWrapper > div.col-lg-8.col-md-8.leftColumnForLarge > div.detailHeader.borderBox > div.well.mb0 > div > div.col-lg-2.col-md-2.col-sm-2.hidden-xs.text-center > img\")) {            productObj.img=document.querySelector(\"body > div.page > main > div > div.row.detailPageWrapper > div.col-lg-8.col-md-8.leftColumnForLarge > div.detailHeader.borderBox > div.well.mb0 > div > div.col-lg-2.col-md-2.col-sm-2.hidden-xs.text-center > img\").getAttribute(\"src\");        }else if(document.querySelector(\"body > div.page > main > div > div.row.detailPageWrapper > div.col-lg-8.col-md-8.leftColumnForLarge > div.detailHeader.borderBox > div.well.mb0 > div > div.col-lg-2.col-md-2.col-sm-2.hidden-xs.text-center > a > img\")){            productObj.img=document.querySelector(\"body > div.page > main > div > div.row.detailPageWrapper > div.col-lg-8.col-md-8.leftColumnForLarge > div.detailHeader.borderBox > div.well.mb0 > div > div.col-lg-2.col-md-2.col-sm-2.hidden-xs.text-center > a > img\").getAttribute(\"src\");        }        if (jQuery('label:contains(\"Son Başvuru Tarihi\")').length > 0) {            productObj.SKT = jQuery('label:contains(\"Son Başvuru Tarihi\")').parent().find(\"span\").last().text().trim();        }        productObj.href=window.location.href;                if (localStorage.getItem('objArr') && localStorage.getItem('objArr') != \"\") {            var addStatu=true;            products=localStorage.getItem('objArr');            if (JSON.parse(\"[\"+(products)+\"]\").length <= 25) {                JSON.parse(\"[\"+(products)+\"]\").forEach(element => {                    if (element.title == productObj.title && element.companyName == productObj.companyName) {                        addStatu=false;                    }                });                if (addStatu) {                    productObj.isActive=\"1\";                    products=products+\",\"+JSON.stringify(productObj);                }            }else{                console.warn(\"Limit\");            }                        console.log(\"doluymuş\",JSON.parse(\"[\"+(products)+\"]\"));        }        else{            productObj.isActive=\"1\";            products=JSON.stringify(productObj);            console.log(\"boşmuş\",JSON.parse(\"[\"+(products)+\"]\"));        }                localStorage.setItem('objArr',products);        if (document.querySelector(\"body > div.page > main > div > div.row.detailPageWrapper > div.col-lg-8.col-md-8.leftColumnForLarge > div.detailHeader.borderBox > div.detailSocialTools > div > div.col-lg-7.col-md-6.col-sm-7.col-xs-12.fixedContainer > div > div.col-lg-6.col-md-6.col-sm-6.col-xs-10.applyBttnCont > a\")) {            document.querySelector(\"body > div.page > main > div > div.row.detailPageWrapper > div.col-lg-8.col-md-8.leftColumnForLarge > div.detailHeader.borderBox > div.detailSocialTools > div > div.col-lg-7.col-md-6.col-sm-7.col-xs-12.fixedContainer > div > div.col-lg-6.col-md-6.col-sm-6.col-xs-10.applyBttnCont > a\").addEventListener(\"click\",function () {                var p = JSON.parse(\"[\"+(localStorage.getItem('objArr'))+\"]\");                for (let i = 0; i < p.length; i++) {                    if (p[i].title==productObj.title && p[i].companyName == productObj.companyName) {                        p[i].isActive=\"0\";                    }                }                console.log(\"silinmiş olmalı \"+JSON.stringify(p).length,JSON.stringify(p).substr(1,JSON.stringify(p).length-2));                localStorage.setItem('objArr',JSON.stringify(p).substr(1,JSON.stringify(p).length-2));            });        }            } catch (error) {        console.warn(\"productViewListenerJS is not running\",error);    }}function rmcWidgetShow(id) {    try {        if (!document.querySelector(\"#\"+id)) {            var styleEl = document.createElement(\"style\");            styleEl.id=\"rmcStyleTag\";            styleEl.innerHTML=''+            '.vl-widget { font-family: avalon, sans-serif; background-color:white}'+            '.vl-header { font-style: italic; font-size: 25px; margin: 10px 0 15px 0; font-weight: 700; color: #4a4a4a; }'+             '.vl-slider-item { position: relative } '+            '.vl-prev{left:12px !important}'+            '.vl-next{right:10px !important}'+            '.vl-product-container { width: 180px; text-align: center; margin: 0 auto; height: 180px;}'+             '.vl-product-img { cursor: pointer; height:33px; }'+            '.vl-product-info { width: 180px; }'+            '.vl-product-brand { text-align: center;font-size: 12px; color: #9fa2a7; padding: 5px} '+            '.vl-product-title { font-size: 12px; color: gray; font-weight: bold; cursor: pointer; overflow: hidden; margin-top: 30px; display: block !important; } '+            '@media only screen and (max-width: 600px) { '+                '.vl-product-container { width: 145px !important; text-align: center; margin: 0 auto; } '+                '.vl-product-img { height: 145px !important; } '+                '.vl-product-info { width: 145px !important; } '+                '.vl-product-brand{ height: 30px !important; } '+            '}';            document.head.appendChild(styleEl);            var container = document.createElement(\"div\");                container.id=id;                container.setAttribute(\"class\",\"vl-widget\");            var headerEl = document.createElement(\"div\");                headerEl.setAttribute(\"class\",\"vl-header\");                headerEl.innerHTML=\"<img src='https://img.visilabs.net/banner/uploaded_images/228_1214_20200227134236214.png'/>\";                        var slider = document.createElement(\"div\");                slider.setAttribute(\"class\",\"vl-slider\");            var sliderWrapper = document.createElement(\"div\");                sliderWrapper.setAttribute(\"class\",\"vl-slider-wrapper\");            slider.appendChild(sliderWrapper);            container.appendChild(headerEl);            container.appendChild(slider);            function rmcSKTController(SKT) {                try {                    var dateArr = SKT.split(\".\");                    SKT = dateArr[1]+\"-\"+dateArr[0]+\"-\"+dateArr[2];                    var end = new Date(SKT);                    var now = new Date();                    if(now>end){                        return true;}                    else if(end>now) {                        return false;                    }                      else {                        return true;                    }                  } catch (error) {                    return true;                }            }            if (localStorage.getItem('objArr')!=null) {                var tempControlItemCount = 0;                JSON.parse(\"[\"+(localStorage.getItem('objArr'))+\"]\").reverse().forEach(element => {                    if (element.isActive == 1 && rmcSKTController(element.SKT) == false) {                        tempControlItemCount++;                        if (tempControlItemCount<=20) {                            sliderWrapper.appendChild(rmcWidgetItemCreator(element.title,element.companyName,element.img,element.href));                        }                    }                });                if (tempControlItemCount == 0) {                    console.log(\"widget removed.\");                    return false;                }                console.log(container);                document.querySelector(\".detailSocialBottomCopy\").parentNode.insertBefore(container, document.querySelector(\".detailSocialBottomCopy\").nextSibling);                var intCount=0;                var tmpInt = setInterval(() => {                    try {                        if (intCount<20) {                            if (document.querySelector(\"#\"+id)) {                                vlWidgetHandler(id,settings={arrows:{size:20,color:'#6f6e6e',borderSize:1},dots:false});                                clearInterval(tmpInt);                            }else{intCount++;}                        }else{                            clearInterval(tmpInt);                            console.warn(\"Last seen widget is not defined...\");                        }                    } catch (error) {}                }, 100);            }            function rmcWidgetItemCreator(title,compName,img,href) {                var item = document.createElement(\"div\");                    item.setAttribute(\"class\",\"vl-slider-item\");                                var itemc = document.createElement(\"div\");                    itemc.setAttribute(\"class\",\"vl-product-container\");                                var divA = document.createElement(\"a\");                    divA.setAttribute(\"href\",href);                var imgDiv = document.createElement(\"div\");                var imgEl = document.createElement(\"img\");                    imgEl.setAttribute(\"src\",img);                    imgEl.setAttribute(\"class\",\"vl-product-img\");                                var infodiv = document.createElement(\"div\");                    infodiv.setAttribute(\"class\",\"vl-product-info\");                var titleEl = document.createElement(\"div\");                    titleEl.setAttribute(\"class\",\"vl-product-title\");                    titleEl.innerText=title;                                var descEl = document.createElement(\"div\");                    descEl.setAttribute(\"class\",\"vl-product-brand\");                    descEl.innerText=compName;                infodiv.appendChild(titleEl);                infodiv.appendChild(descEl);                imgDiv.appendChild(imgEl);                itemc.appendChild(imgDiv);                itemc.appendChild(infodiv);                item.appendChild(divA);                divA.appendChild(itemc);                return item;            }        }    } catch (error) {console.error(error)}}function vlWidgetHandler(widgetId, settings = { arrows: {}, dots: {} }) {    if (!window.activeVLWidgets) {        window.activeVLWidgets = new Object();    }    var isMobile = (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) ? true : false;    var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;    if (widgetId && !window.activeVLWidgets[widgetId]) {        window.activeVLWidgets[widgetId] = settings;        var widgetEl = document.getElementById(widgetId),            itemsViewed = settings.itemsToView || 4,            axis = settings.axis || \"X\",            dimension1 = axis == \"X\" ? \"width\" : \"height\",            dimension2 = axis == \"X\" ? \"height\" : \"width\",            side1 = axis == \"Y\" ? \"top\" : \"left\",            side2 = axis == \"Y\" ? \"bottom\" : \"right\";        var autoScroll = settings.autoScroll || false,            autoScrollTimer = settings.autoScrollTimer || 5,            enhancedEcommerce = settings.enhancedEcommerce || false;        var arrows = settings.arrows == undefined ? true : settings.arrows,            arrowSize = settings.arrows == undefined || settings.arrows.size == undefined ? 20 : settings.arrows.size,            arrowBorderSize = settings.arrows == undefined || settings.arrows.borderSize == undefined ? 2 : settings.arrows.borderSize,            arrowColor = settings.arrows == undefined || settings.arrows.color == undefined ? \"#333\" : settings.arrows.color,            arrowsHover = settings.arrows == undefined || settings.arrows.showOnHover == undefined ? false : settings.arrows.showOnHover,            mobileArrows = settings.arrows == undefined || settings.arrows.mobile == undefined ? true : settings.arrows.mobile,            dots = settings.dots == undefined ? false : settings.dots,            dotsHover = settings.dots == undefined || settings.dots.showOnHover == undefined ? false : settings.dots.showOnHover,            dotsNumbers = settings.dots == undefined || settings.dots.numbers == undefined ? false : settings.dots.numbersi,            isResponsive = (settings.width || settings.height || settings.mobileHeight || settings.mobileWidth) && !settings.responsive ? false : true,            breakpoints = settings.responsive == undefined ? [] : settings.responsive;        if(breakpoints.length>0){breakpoints.unshift({breakpoint: windowWidth, settings: {itemsToView: settings.itemsToView || 4}})}    } else {        return console.error(\"Widget is not found. id of widget is not defined as a function parameter\");    }    var firstItemsViewed = itemsViewed;    if (widgetEl == null) {        console.warn(\"Widget is not found. No element exist with id=\" + widgetId);        return;    }    var wrapperEl = widgetEl.querySelector(\".vl-slider-wrapper\"),        wrapperTransform = wrapperEl.style.transform,        arrowPrev,        arrowNext,        currentDimension1 = parseFloat(wrapperTransform.substring(wrapperTransform.indexOf(\"(\") + 1, wrapperTransform.indexOf(\"px\"))),        sliderEl = widgetEl.querySelector(\".vl-slider\"),        sliderElMargin = sliderEl.offsetLeft,        sliderItemEls = widgetEl.querySelectorAll(\".vl-slider-item\");    var containerEl = widgetEl.parentNode.parentNode;    var containerSize1 = axis == \"X\" ? (containerEl.getBoundingClientRect().width - computedStyleInteger(containerEl, \"paddingLeft\") - computedStyleInteger(containerEl, \"paddingRight\")) : (containerEl.getBoundingClientRect().height - computedStyleInteger(containerEl, \"paddingTop\") - computedStyleInteger(containerEl, \"paddingBottom\"));    var itemSizes = sliderItemEls[0].getBoundingClientRect();    var itemSize = axis == \"X\" ? (isMobile ? settings.mobileWidth || settings.width : settings.width) || containerSize1 / itemsViewed : (isMobile ? settings.mobileHeight || settings.height : settings.height) || containerSize2 / itemsViewed,        itemSize2 = axis == \"X\" ? (isMobile ? settings.mobileHeight || settings.height : settings.height) || itemSizes.height : (isMobile ? settings.mobileWidth || settings.width : settings.width) || itemSizes.width,        itemsTotal = sliderItemEls.length,        midItemEl = widgetEl.querySelectorAll(\".vl-slider-item\")[Math.round(itemsTotal / 2) + Math.floor(itemsViewed / 2)],        midItemId = midItemEl ? midItemEl.dataset.itemId : null,        slideThreshold = itemSize / 3,        autoScrolling = 0;    responsiveViewHandler();    var infinite = itemsTotal >= itemsViewed * 2 ? true : false,        dotLiEls,        activeDotId;    if (arrowsHover == undefined) { var arrowsHover = false }    if (dotsHover == undefined) { var dotsHover = false }    var looping = false,        sliding = false,        firstDimension1,        startDimension1,        startDimension2,        startT,        draggingDimension1,        isDragging = false,        endDimension1,        endDimension2,        endT,        draggingDeltaDimension1,        draggingDeltaDimension1Abs,        draggingDeltaDimension1Sign,        draggingDeltaDimension2,        draggingDeltaDimension2Abs,        draggingDeltaDimension2Sign,        deltaDimension1,        deltaDimension1Abs,        deltaDimension1Sign,        deltaDimension2,        deltaDimension2Abs,        deltaT;    function computedStyleInteger(el, attr) {        return parseFloat(getComputedStyle(el)[attr]);    }    function arrowGenerator() {        arrowPrev = document.createElement(\"div\");        arrowPrev.className = \"vl-arrow-btn vl-prev\";        widgetEl.insertBefore(arrowPrev, sliderEl);        arrowNext = document.createElement(\"div\");        arrowNext.className = \"vl-arrow-btn vl-next\";        widgetEl.appendChild(arrowNext);        arrowPrev.addEventListener(\"click\", () => { slideHandler(\"prev\", itemsViewed) });        arrowNext.addEventListener(\"click\", () => { slideHandler(\"next\", itemsViewed) });    }    function dotGenerator() {        if (itemsViewed > 1) {            var currentDots = widgetEl.querySelector(\".vl-slider-dots\");            if (currentDots != undefined) {                currentDots.parentNode.removeChild(currentDots);            }            var dotsUl = document.createElement(\"ul\");            dotsUl.className = \"vl-slider-dots\";            sliderEl.appendChild(dotsUl);            for (var i = 0; i < Math.ceil(itemsTotal / itemsViewed); i++) {                var dotLi = document.createElement(\"li\");                dotLi.className = \"vl-slider-dot\";                dotLi.innerHTML = (i + 1);                dotLi.style.color = dotsNumbers ? \"white\" : \"transparent\";                dotLi.addEventListener(\"click\", () => { slideHandler(\"dot\", itemsViewed) });                dotsUl.appendChild(dotLi);            }            dotLiEls = widgetEl.querySelectorAll(\".vl-slider-dot\");            dotsTotal = dotLiEls.length;            activeDotId = 1;            dotLiEls[activeDotId - 1].classList.add(\"active\");        } else {            if (currentDots != undefined) {                currentDots.parentNode.removeChild(currentDots);            }        }    }    function styleGenerator() {        var styleString =            \"#\" + widgetId + \"{position: relative}\" +            \"#\" + widgetId + \">.vl-slider{scroll-behavior: smooth; position: relative;\" + (!isResponsive ? (dimension1 + \": \" + (itemSize * itemsViewed) + (itemsViewed == 1 ? 20 : 0)) + \"px;\" : \"\") + \"margin: 0 auto; scroll-snap-type: x mandatory;-webkit-overflow-scrolling: touch;scroll-snap-type: mandatory;-ms-scroll-snap-type: mandatory;scroll-snap-points-x: repeat(100%);-ms-scroll-snap-points-x: repeat(100%);overflow:hidden; }\" +            \"#\" + widgetId + \">.vl-slider::-webkit-scrollbar { display: none;}\" +            \"#\" + widgetId + \">.vl-slider>.vl-slider-wrapper{\" + dimension1 + \": \" + (infinite ? itemsTotal * 2 : itemsTotal) * itemSize + \"px;}\" +            \"#\" + widgetId + \">.vl-slider>.vl-slider-wrapper>.vl-slider-item{overflow:hidden;\" + dimension1 + \":\" + itemSize + \"px; display:inline-block; float:left; scroll-snap-align: center;}\";        if (arrows) {            var arrowStyle;            arrowStyle = \"#\" + widgetId + \">.vl-arrow-btn{border-bottom: \" + arrowBorderSize + \"px solid \" + arrowColor + \"; border-right: \" + arrowBorderSize + \"px solid \" + arrowColor + \"; position: absolute; color: #0f0f0f; z-index: 1000;\" + (axis == \"X\" ? \"bottom:calc(50% - \" + arrowSize / 2 + \"px);height:\" + arrowSize + \"px; width: \" + arrowSize + \"px;\" : \"left: calc(50% - 40px);\") + \" cursor:pointer;}\" +                \"#\" + widgetId + \">.vl-prev{\" + side1 + \":\" + (-arrowSize * Math.sqrt(2) / 2) + \"px; transform: rotate(135deg)}\" + \"#\" + widgetId + \">.vl-next{\" + side2 + \":\" + (-arrowSize * Math.sqrt(2) / 2) + \"px;transform: rotate(-45deg)}\";            if (arrowsHover) {                arrowStyle = \"#\" + widgetId + \">.vl-arrow-btn {opacity: 0;border-bottom: \" + arrowBorderSize + \"px solid \" + arrowColor + \"; border-right: \" + arrowBorderSize + \"px solid \" + arrowColor + \"; position: absolute; color: #0f0f0f; z-index: 1000;\" + (axis == \"X\" ? \"bottom:calc(50% - \" + arrowSize / 2 + \"px);height:\" + arrowSize + \"px; width: \" + arrowSize + \"px;\" : \"left: calc(50% - 40px);\") + \" cursor:pointer;}\" +                    \"#\" + widgetId + \":hover > .vl-arrow-btn { opacity: 1; transition: all 0.2s ease-in-out;}\" +                    \"#\" + widgetId + \">.vl-prev{\" + side1 + \": 15px; transform: rotate(135deg)}\" + \"#\" + widgetId + \">.vl-next{\" + side2 + \":15px; transform: rotate(-45deg)}\";            }            styleString += arrowStyle;        }        if (dots) {            var dotStyle;            dotStyle = \"#\" + widgetId + \">.vl-slider>.vl-slider-dots {position: absolute; list-style: none; margin: 0; padding: 0; bottom: 15px; text-align: center; \" + dimension1 + \": 100%;}\" +                \"#\" + widgetId + \">.vl-slider>.vl-slider-dots>.vl-slider-dot {cursor:pointer;display: inline-block; color: white; background: black; border-radius: 50%; \" + dimension1 + \": 20px; \" + dimension2 + \": 20px; text-align: center; line-height: 20px; font-size: 18px; margin: 0 5px;}\" +                \"#\" + widgetId + \">.vl-slider>.vl-slider-dots>.vl-slider-dot:hover {background: darkgray}\" +                \"#\" + widgetId + \">.vl-slider>.vl-slider-dots>.vl-slider-dot.active {background: lightgray; color: black;}\";            if (dotsHover) {                dotStyle = \"#\" + widgetId + \":hover > .vl-slider>.vl-slider-dots {opacity: 1; transition: all 0.2s ease-in-out;}\" +                    \"#\" + widgetId + \">.vl-slider>.vl-slider-dots {transition: all 0.2s ease-in-out; opacity: 0; position: absolute; list-style: none; margin: 0; padding: 0; bottom: 0; text-align: center; \" + dimension1 + \": 100%;}\" +                    \"#\" + widgetId + \">.vl-slider>.vl-slider-dots>.vl-slider-dot {cursor:pointer;display: inline-block; color: white; background: black; border-radius: 50%; \" + dimension1 + \": 20px; \" + dimension2 + \": 20px; text-align: center; line-height: 20px; font-size: 18px; margin: 0 5px;}\" +                    \"#\" + widgetId + \">.vl-slider>.vl-slider-dots>.vl-slider-dot:hover {background: lightgray; color: black;}\" +                    \"#\" + widgetId + \">.vl-slider>.vl-slider-dots>.vl-slider-dot.active {background: darkgrey; }\";            }            styleString += dotStyle;        }        if (document.head.querySelector(\"#\" + widgetId + \"-style\")) {            document.head.querySelector(\"#\" + widgetId + \"-style\").innerHTML = styleString;        } else {            var styleEl = document.createElement(\"style\");            styleEl.id = widgetId + \"-style\";            styleEl.innerHTML = styleString;            document.head.appendChild(styleEl);        }        if (arrows && mobileArrows && sliderElMargin > arrowPrev.clientWidth) {            arrowPrev.style.side1 = sliderElMargin - arrowPrev.clientWidth + \"px\";            arrowNext.style.side2 = sliderElMargin - arrowNext.clientWidth + \"px\";        }        widgetEl.parentNode.style = \"width: 100%; display: inline-block;\";    }    function responsiveViewHandler() {        if (settings.width || settings.height) {            containerSize1 = axis == \"X\" ? (containerEl.getBoundingClientRect().width - computedStyleInteger(containerEl, \"paddingLeft\") - computedStyleInteger(containerEl, \"paddingRight\")) : (containerEl.getBoundingClientRect().height - computedStyleInteger(containerEl, \"paddingTop\") - computedStyleInteger(containerEl, \"paddingBottom\"));            itemsViewed = Math.floor(containerSize1 / itemSize) >= firstItemsViewed ? firstItemsViewed : Math.floor(containerSize1 / itemSize);            itemsViewed = itemsViewed == 0 ? 1 : itemsViewed;        } else if(breakpoints.length >= 1){            windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;            for (var i = 0; i <breakpoints.length; i++) {                if (breakpoints[i].breakpoint > windowWidth) {                    itemsViewed = breakpoints[i].settings.itemsToView;                }            }            containerSize1 = axis == \"X\" ? (containerEl.getBoundingClientRect().width - computedStyleInteger(containerEl, \"paddingLeft\") - computedStyleInteger(containerEl, \"paddingRight\")) : (containerEl.getBoundingClientRect().height - computedStyleInteger(containerEl, \"paddingTop\") - computedStyleInteger(containerEl, \"paddingBottom\"));            itemSize = containerSize1 / itemsViewed;        }    }    function EEHandler(arr) {        for (var i = 0; i < sliderItemEls.length; i++) {            var itemData = sliderItemEls[i].dataset;            var link = itemData.link || \"\",                omzn = link.substring(link.indexOf(\"OM.zn=\") + 6, link.indexOf(\"&OM.zpc=\")),                title = decodeURIComponent(omzn.substring(0, omzn.lastIndexOf(\"-w\")));            arr.push({                id: itemData.id || null,                name: itemData.name || null,                price: itemData.price ? parseFloat(itemData.price).toFixed(2) : null,                brand: itemData.brand || null,                position: i,                list: \"Visilabs\" + title || null            });        }        dataLayer.push({            event: \"visilabs_recommendation_impression\",            ecommerce: {                currencyCode: \"TRY\",                impressions: arr            }        });    }    function EEClick(el) {        var itemData = el.dataset;        var link = itemData.link || \"\",            omzn = link.substring(link.indexOf(\"OM.zn=\") + 6, link.indexOf(\"&OM.zpc=\")),            title = decodeURIComponent(omzn.substring(0, omzn.lastIndexOf(\"-w\")));        dataLayer.push({            event: \"visilabs_recommendation_click\",            ecommerce: {                click: {                    actionField: {                        list: \"Visilabs \" + title                    },                    products: [{                        id: itemData.id,                        name: itemData.name,                        brand: itemData.brand,                        position: itemData.itemId,                        price: itemData.price                    }]                }            }        });    }    function idHandler() {        for (var i = 0; i < itemsTotal; i++) {            var item = sliderItemEls[i];            item.dataset.itemId = (i + 1);        }    }    function cloneHandler() {        for (var i = 0; i < itemsTotal; i++) {            var item = sliderItemEls[i];            var clone = item.cloneNode(true);            wrapperEl.appendChild(clone);        }        for (var i = 0; i < (itemsTotal / 2); i++) {            var lastSliderItemEl = widgetEl.querySelectorAll(\".vl-slider-item\")[(itemsTotal * 2) - 1];            wrapperEl.insertBefore(lastSliderItemEl, widgetEl.querySelectorAll(\".vl-slider-item\")[0]);        }    }    function linkPreventer() {        var linkEls = widgetEl.querySelectorAll(\".vl-slider-item\");        for (var i = 0; i < linkEls.length; i++) {            linkEls[i].addEventListener(\"click\", (e) => { e.preventDefault(); });        }    }    function transformDimension1() {        wrapperEl.style.transform = \"translate\" + axis + \"(\" + currentDimension1 + \"px)\";    }    function sliderAnimationStart(duration) {        wrapperEl.style.transition = \"all \" + (duration * 0.2) + \"s ease-in-out\";    }    function sliderAnimationStop() {        wrapperEl.style.transition = \"all 0s ease-in-out\";    }    function midItemCalculator() {        var midNumber = Math.round(itemsTotal / 2) + Math.ceil(itemsViewed / 2);        if (midNumber > widgetEl.querySelectorAll(\".vl-slider-item\").length - 1) {            midNumber = widgetEl.querySelectorAll(\".vl-slider-item\").length - 1;        }        midItemEl = widgetEl.querySelectorAll(\".vl-slider-item\")[midNumber];        midItemId = midItemEl.dataset.itemId;        return midItemId;    }    function activeDotChanger() {        if (dots && itemsViewed > 1) {            activeDotId = Math.ceil(midItemCalculator() / itemsViewed);            var activeDotEl = widgetEl.querySelector(\".vl-slider-dot.active\");            var activeDotElId = activeDotEl.innerHTML;            if (activeDotId != activeDotElId) {                activeDotEl.classList.remove(\"active\");                dotLiEls[activeDotId - 1].classList.add(\"active\");            }        } else return;    }    function loopHandler(s, n) {        looping = true;        setTimeout(() => {            if (s < 0) {                for (var i = 0; i < n; i++) {                    var currentELs = widgetEl.querySelectorAll(\".vl-slider-item\");                    var lastItem = currentELs[currentELs.length - 1];                    wrapperEl.insertBefore(lastItem, currentELs[0]);                    sliderAnimationStop();                    sliding = false;                    currentDimension1 -= itemSize;                }            }            if (s > 0) {                for (var i = 0; i < n; i++) {                    var currentELs = widgetEl.querySelectorAll(\".vl-slider-item\");                    var firstItem = currentELs[0];                    wrapperEl.appendChild(firstItem);                    sliderAnimationStop();                    sliding = false;                    currentDimension1 += itemSize;                }            }            transformDimension1();            looping = false;        }, 200 * n);    }    function slideHandler(type, item) {        if (!sliding) {            sliding = true;            sliderAnimationStart(item);            var s;            if (type === \"prev\") {                s = -1;            }            if (type === \"next\") {                s = 1;            }            if (type === \"dot\") {                var dotId = event.target.innerHTML;                var deltaDot = dotId - activeDotId;                var deltaDotAbs = Math.abs(dotId - activeDotId);                s = deltaDot / deltaDotAbs;                midItemRemainder = (midItemCalculator() % itemsViewed);                if (midItemRemainder === 0) { midItemRemainder = itemsViewed }                if ((Math.ceil(itemsViewed / 2) - midItemRemainder) === 0) {                    item *= deltaDotAbs;                } else {                    item *= deltaDotAbs;                    item += (Math.ceil(itemsViewed / 2) - midItemRemainder) * s;                }                activeDotId = dotId;            }            currentDimension1 -= item * itemSize * s;            if (itemsViewed > 1 && !infinite) {                currentDimension1 = currentDimension1 >= 0 ? 0 : currentDimension1;                currentDimension1 = currentDimension1 <= -((itemsTotal - itemsViewed + 1) * itemSize) ? -((itemsTotal - itemsViewed) * itemSize) : currentDimension1;            }            transformDimension1();            if (infinite) { loopHandler(s, item) };            setTimeout(activeDotChanger, item * 200);            sliding = false;        }    }    function isInViewport(elem) {        var bounding = elem.getBoundingClientRect();        return (            bounding.top >= 0 &&            bounding.left >= 0 &&            bounding.bottom <= (window.innerHeight - 25 || document.documentElement.clientHeight - 25) &&            bounding.right <= (window.innerWidth - 25 || document.documentElement.clientWidth - 25)        );    };    function autoScroller() {        if (currentDimension1 <= 0 && autoScrolling === 0) {            slideHandler(\"next\", itemsViewed);        }    }    function touchReset() {        clearTimeout(resetTimer);        isDragging = false;        wrapperEl.style.transform = \"translate\" + axis + \"(\" + (currentDimension1 + draggingDeltaDimension1 - (draggingDeltaDimension1 % itemSize)) + \"px)\";        sliderAnimationStart(1);    }    var resetTimer;    function draggingStart(e) {        if (!isDragging && !looping) {            startT = performance.now();            if (e.type === \"touchstart\") {                wrapperEl.addEventListener(\"touchmove\", dragging, { passive: false });                wrapperEl.addEventListener(\"touchend\", draggingEnd, { passive: false });                startDimension1 = axis == \"X\" ? e.touches[0].clientX : e.touches[0].clientY;                startDimension2 = axis == \"X\" ? e.touches[0].clientY : e.touches[0].clientX;            }            if (e.type === \"mousedown\" && e.button === 0) {                e.preventDefault();                startDimension1 = axis == \"X\" ? e.clientX : e.clientY;                startDimension2 = axis == \"X\" ? e.clientY : e.clientX;            }            isDragging = true;            resetTimer = setTimeout(touchReset, 200);            firstDimension1 = currentDimension1;        }    }    function dragging(e) {        if (isDragging) {            draggingT = performance.now();            if (e.type === \"touchmove\") {                wrapperEl.removeEventListener(\"touchstart\", dragging);                draggingDimension1 = axis == \"X\" ? e.touches[0].clientX : e.touches[0].clientY;                draggingDimension2 = axis == \"X\" ? e.touches[0].clientY : e.touches[0].clientX;                           }            if (e.type === \"mousemove\" && e.button === 0) {                draggingDimension1 = axis == \"X\" ? e.clientX : e.clientY;                draggingDimension2 = axis == \"X\" ? e.clientY : e.clientX;                e.preventDefault();            }            draggingDeltaDimension1 = draggingDimension1 - startDimension1;            draggingDeltaDimension1Abs = Math.abs(draggingDeltaDimension1);            draggingDeltaDimension1Sign = draggingDeltaDimension1Abs / draggingDeltaDimension1;            draggingDeltaDimension2 = draggingDimension2 - startDimension2;            draggingDeltaDimension2Abs = Math.abs(draggingDeltaDimension2);            draggingDeltaDimension2Sign = draggingDeltaDimension2Abs / draggingDeltaDimension2;            sliderAnimationStop();            wrapperEl.style.transform = \"translate\" + axis + \"(\" + (currentDimension1 + draggingDeltaDimension1) + \"px)\";            if (draggingDeltaDimension1Abs > 7) {                e.preventDefault();                clearTimeout(resetTimer);            }            if (draggingDeltaDimension2Abs > draggingDeltaDimension1Abs && draggingDeltaDimension2Abs > itemSize2 / 5) {                touchReset();            }            if (infinite) {                if (draggingDeltaDimension1Abs >= itemsViewed * itemSize) {                    var d = draggingDeltaDimension1Sign === -1 ? \"next\" : \"prev\";                    currentDimension1 += itemsViewed * itemSize * draggingDeltaDimension1Sign;                    transformDimension1(itemsViewed);                    loopHandler(-draggingDeltaDimension1Sign, itemsViewed);                    setTimeout(activeDotChanger, 200);                    wrapperEl.removeEventListener(\"touchmove\", dragging);                    isDragging = false;                    clearTimeout(resetTimer);                    return true;                }            }            else if (currentDimension1 + draggingDeltaDimension1 > itemSize || currentDimension1 + draggingDeltaDimension1 <= -(itemsTotal - itemsViewed + 1) * itemSize) {                if (currentDimension1 + draggingDeltaDimension1 > itemSize) { currentDimension1 = 0; }                if (currentDimension1 + draggingDeltaDimension1 <= -(itemsTotal - itemsViewed + 1) * itemSize) { currentDimension1 = itemSize * -(itemsTotal - itemsViewed) }                sliderAnimationStart(1);                transformDimension1();                setTimeout(activeDotChanger, 200);                wrapperEl.removeEventListener(\"touchmove\", dragging);                isDragging = false;                clearTimeout(resetTimer);                return true;            }        }    }    function draggingEnd(e) {        setTimeout(function () {            wrapperEl.addEventListener(\"touchstart\", draggingStart, { passive: false });        }, 0);        if (isDragging) {            endT = performance.now();            deltaT = endT - startT;            if (e.type === \"touchend\" || e.type === \"touchcancel\") {                endDimension1 = axis == \"X\" ? e.changedTouches[0].clientX : e.changedTouches[0].clientY;                endDimension2 = axis == \"X\" ? e.changedTouches[0].clientY : e.changedTouches[0].clientX;            }            if (e.type === \"mouseup\") {                endDimension1 = axis == \"X\" ? e.clientX : e.clientY;                endDimension2 = axis == \"X\" ? e.clientY : e.clientX;            }            deltaDimension1 = endDimension1 - startDimension1;            deltaDimension1Abs = Math.abs(deltaDimension1);            deltaDimension1Sign = deltaDimension1Abs / deltaDimension1;            deltaDimension2 = endDimension2 - startDimension2;            deltaDimension2Abs = Math.abs(deltaDimension2);            if (deltaT < 200 && deltaDimension2Abs <= 2 && deltaDimension1Abs <= 2) {                isDragging = false;                clearTimeout(resetTimer);                var link;                var eventPath = e.path || (e.composedPath && e.composedPath());                for (var q = 0; q < eventPath.length; q++) {                    if (eventPath[q].href !== undefined) {                        link = eventPath[q].href;                        if (enhancedEcommerce) {                            for (var p = 0; p < eventPath.length; p++) {                                if (eventPath[p].classList.contains(\"vl-slider-item\")) {                                    var selectedItem = eventPath[p];                                    EEClick(selectedItem);                                    break;                                }                            }                        }                        break;                    }                }                if (link != undefined) { window.location = link; }            }            if (deltaDimension1Abs < slideThreshold) {                sliderAnimationStart(1);                transformDimension1();                isDragging = false;                clearTimeout(resetTimer);            } else {                var d = deltaDimension1Sign === -1 ? \"next\" : \"prev\";                var n = Math.floor(deltaDimension1Abs / itemSize) + (deltaDimension1Abs % itemSize > slideThreshold ? 1 : 0);                slideHandler(d, n);                isDragging = false;                clearTimeout(resetTimer);            }        }    }    function initSlider() {        if (itemsViewed >= itemsTotal) {            arrows = false;            dots = false;            autoScroll = false;        }        wrapperEl.style.transform = \"translate\" + axis + \"(\" + (infinite ? -(Math.round(itemsTotal / 2) * itemSize) : 0) + \"px)\";        wrapperTransform = wrapperEl.style.transform;        sliderAnimationStop();        currentDimension1 = parseFloat(wrapperTransform.substring(wrapperTransform.indexOf(\"(\") + 1, wrapperTransform.indexOf(\"px\")));        if (isMobile) {            arrowsHover = false;            dots = false;            autoScroll = false;        }        var EEArray = [];        if (enhancedEcommerce) { EEHandler(EEArray); }        idHandler();        if (infinite) {            cloneHandler();            sliderItemEls = widgetEl.querySelectorAll(\".vl-slider-item\");        }        if (arrows) {            if (isMobile) {                if (mobileArrows) {                    arrowGenerator();                }            } else {                arrowGenerator();            }        }        if (axis == \"Y\") {            dots = false;        }        if (dots) {            dotGenerator();            activeDotChanger();        }        styleGenerator();        if (autoScroll && isInViewport(sliderEl)) {            widgetEl.addEventListener(\"mouseenter\", () => { autoScrolling = 1; });            widgetEl.addEventListener(\"mouseleave\", () => { autoScrolling = 0; });            window.addEventListener(\"focus\", function () {                autoScrolling = 0;            });            window.addEventListener(\"blur\", function () {                autoScrolling = 1;            });            setInterval(autoScroller, autoScrollTimer * 1000);        }        linkPreventer();        if (isMobile) {            wrapperEl.addEventListener(\"touchstart\", draggingStart, { passive: false });        } else {            wrapperEl.addEventListener(\"mousedown\", draggingStart);            document.addEventListener(\"mousemove\", dragging);            document.addEventListener(\"mouseup\", draggingEnd);        }    }    initSlider();    window.addEventListener(\"resize\", function () {        responsiveViewHandler();        currentDimension1 = parseFloat(wrapperTransform.substring(wrapperTransform.indexOf(\"(\") + 1, wrapperTransform.indexOf(\"px\")));        currentDimension1 += currentDimension1 % itemSize;        transformDimension1();        styleGenerator();        if (dots) dotGenerator();    });}/* C# BA:2020-02-28  U# BA:2020-04-01*/","cid":"","courseofaction":""},"custom_attr":[]}],"","{\"data\":{}}", null, null,"{\"ab\":[],\"sp\":[]}");